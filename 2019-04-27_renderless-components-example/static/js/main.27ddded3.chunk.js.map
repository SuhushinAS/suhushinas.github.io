{"version":3,"sources":["app/history.js","modules/common/components/If.jsx","modules/common/components/KeyHandler.jsx","modules/common/components/Layout.jsx","modules/example-map/components/GeoJSONField.jsx","modules/example-map/components/TileLayerField.jsx","modules/map/context/MapContext.js","modules/map/hoc/withMap.jsx","modules/map/components/GeoJSON.jsx","modules/map/components/Map.jsx","modules/map/components/TileLayer.jsx","modules/map/components/View.jsx","modules/example-map/components/ExampleMap.jsx","modules/centrifuge/context/SocketContext.js","modules/centrifuge/components/Centrifuge.jsx","modules/centrifuge/hoc/withSocket.jsx","modules/centrifuge/components/Subscribe.jsx","modules/map/components/Marker.jsx","modules/example-socket/components/ExampleSocket.jsx","modules/example-socket/components/SocketGenerator.jsx","app/index.jsx","serviceWorker.js","index.js"],"names":["createHashHistory","If","_ref","children","condition","KeyHandler","handlerAdd","eventName","document","addEventListener","_this","handler","handlerRemove","removeEventListener","e","props","keyList","type","keyCode","Object","keys","this","forEach","React","Component","Layout","react_default","a","createElement","className","side","main","defaultProps","GeoJSONField","handleChange","onChange","id","_this$props","value","htmlFor","name","defaultChecked","TileLayerField","checked","MapContext","createContext","undefined","withMap","_React$Component","ComponentWithMap","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","renderComponent","context","assign","inherits","createClass","key","Consumer","layerAdd","layerDelete","geoJSON","leaflet","layer","L","GeoJSON","geometryToLayer","addLayer","removeLayer","PureComponent","Map","state","isLoad","handleLoad","setState","refMap","map","ref","Provider","window","remove","params","url","TileLayer","handleViewChange","onViewChange","bounds","getBounds","rectangle","toGeoJSON","fly","on","_this$props2","view","View","isValid","fitBounds","fitWorld","padding","_this$props3","invalidateSize","equals","off","geoJSONIdList","geoJSONData","tileLayerIdList","tileLayerData","ExampleMap","showData","tileLayerId","filterGeoJSON","getGeoJSON","handleGeoJSONChange","objectSpread","defineProperty","handleTileLayerChange","renderGeoJSON","components_GeoJSON","renderGeoJSONField","example_map_components_GeoJSONField","renderTileLayerField","example_map_components_TileLayerField","common_components_Layout","renderMain","renderSide","geoJSONList","filter","map_components_Map","components_TileLayer","components_View","Fragment","cols","disabled","rows","JSON","stringify","SocketContext","Centrifuge","centrifuge","CentrifugeJS","connect","disconnect","isDisconnected","configure","connectData","removeAllListeners","secret","user","timestamp","token","getToken","hmacBody","shaObj","JsSHA","setHMACKey","update","getHMAC","Math","round","Date","now","toString","Subscribe","subscription","handleConnect","forceUpdate","handleSubscribe","eventData","subscribe","channel","unsubscribe","isConnected","withSocket","ComponentWithSocket","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","setLatLng","coordsToLatLng","point","marker","ExampleSocket","handleMessage","message","data","components_Centrifuge","Stamen","renderPoint","components_Subscribe","map_components_Marker","SocketGenerator","position","handlePause","timeout","clearTimeout","handleStart","tickBind","handleStop","process","setPosition","coordinates","Path","tick","bind","assertThisInitialized","onClick","setTimeout","interval","publish","routeData","example-map","component","path","example-socket","socket-generator","routeList","App","showNav","handleKey","altKey","toggleNav","keydown","78","renderLink","routeId","Link","to","renderRoute","Route","Router","history","Switch","Redirect","components_KeyHandler","Boolean","location","hostname","match","ReactDOM","render","app","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s6IAEeA,gBCFA,SAASC,EAATC,GAAmC,IAAtBC,EAAsBD,EAAtBC,SAC1B,OADgDD,EAAZE,WAChBD,sBC2EPE,6MApEbC,WAAa,SAACC,GACZC,SAASC,iBAAiBF,EAAWG,EAAKC,YAQ5CC,cAAgB,SAACL,GACfC,SAASK,oBAAoBN,EAAWG,EAAKC,YAQ/CA,QAAU,SAACG,GACLJ,EAAKK,MAAMC,QAAQF,EAAEG,OACnBP,EAAKK,MAAMC,QAAQF,EAAEG,MAAMH,EAAEI,UAC/BR,EAAKK,MAAMC,QAAQF,EAAEG,MAAMH,EAAEI,SAASJ,4EAU1C,OAAO,iDAWPK,OAAOC,KAAKC,KAAKN,MAAMC,SAASM,QAAQD,KAAKf,0DAWzBS,GAGpB,OAFAI,OAAOC,KAAKC,KAAKN,MAAMC,SAASM,QAAQD,KAAKT,eAC7CO,OAAOC,KAAKL,EAAMC,SAASM,QAAQD,KAAKf,aACjC,iDAQPa,OAAOC,KAAKC,KAAKN,MAAMC,SAASM,QAAQD,KAAKT,sBAtExBW,IAAMC,mBCCzBC,0LAeF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBR,KAAKN,MAAMe,MAC1CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBR,KAAKN,MAAMgB,cAlB7BR,IAAMC,YAArBC,EAKGO,aAAe,CACpBD,KAAM,kBAAML,EAAAC,EAAAC,cAAA,oBACZE,KAAM,kBAAMJ,EAAAC,EAAAC,cAAA,qBAiBDH,QCxBTQ,oNAyBJC,aAAe,WACbxB,EAAKK,MAAMoB,SAASzB,EAAKK,MAAMqB,6EAXxB,IAAAC,EACahB,KAAKN,MAAlBqB,EADAC,EACAD,GAAIE,EADJD,EACIC,MACX,OACEZ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,WAAWU,QAASH,GACnCV,EAAAC,EAAAC,cAAA,SAAOQ,GAAIA,EAAII,KAAK,OAAOL,SAAUd,KAAKa,aAAcO,eAAgBH,EAAMF,GAAKnB,KAAK,aACvFmB,UApBkBb,IAAMC,YAA3BS,EAKGD,aAAe,CACpBG,SAAU,aAEVG,MAAO,IAsBIL,QC9BTS,oNAwBJR,aAAe,WACbxB,EAAKK,MAAMoB,SAASzB,EAAKK,MAAMqB,6EAXxB,IAAAC,EACahB,KAAKN,MAAlBqB,EADAC,EACAD,GAAIE,EADJD,EACIC,MACX,OACEZ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAaU,QAASH,GACrCV,EAAAC,EAAAC,cAAA,SAAOQ,GAAIA,EAAII,KAAK,OAAOL,SAAUd,KAAKa,aAAcS,QAASL,IAAUF,EAAInB,KAAK,UACnFmB,UAnBoBb,IAAMC,YAA7BkB,EAKGV,aAAe,CACpBG,SAAU,cAuBCO,wCC9BFE,EAAarB,IAAMsB,mBAAcC,GCM/B,SAASC,EAAQvB,GAC9B,gBAAAwB,GAAA,SAAAC,IAAA,IAAAC,EAAAxC,EAAAS,OAAAgC,EAAA,EAAAhC,CAAAE,KAAA4B,GAAA,QAAAG,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAA/C,EAAAS,OAAAuC,EAAA,EAAAvC,CAAAE,MAAA6B,EAAA/B,OAAAwC,EAAA,EAAAxC,CAAA8B,IAAAW,KAAAC,MAAAX,EAAA,CAAA7B,MAAAyC,OAAAP,MAMEQ,gBAAkB,SAACC,GAAD,OAAatC,EAAAC,EAAAC,cAACJ,EAADL,OAAA8C,OAAA,GAAevD,EAAKK,MAAWiD,KANhEtD,EAAA,OAAAS,OAAA+C,EAAA,EAAA/C,CAAA8B,EAAAD,GAAA7B,OAAAgD,EAAA,EAAAhD,CAAA8B,EAAA,EAAAmB,IAAA,SAAA9B,MAAA,WAaI,OAAOZ,EAAAC,EAAAC,cAACgB,EAAWyB,SAAZ,KAAsBhD,KAAK0C,qBAbtCd,EAAA,CAAsC1B,IAAMC,eCsD/BuB,qLArDX,OAAO,iDAWP1B,KAAKiD,SAASjD,KAAKN,kDAUFA,GACjBM,KAAKkD,YAAYxD,GACjBM,KAAKiD,SAASjD,KAAKN,sDAQnBM,KAAKkD,YAAYlD,KAAKN,wCAOfA,GAAO,IACPyD,EAAoBzD,EAApByD,QAASC,EAAW1D,EAAX0D,QAChBpD,KAAKqD,MAAQC,IAAEC,QAAQC,gBAAgBL,GACvCC,EAAQK,SAASzD,KAAKqD,2CAOZ3D,GACVA,EAAM0D,QAAQM,YAAY1D,KAAKqD,cAvDbnD,IAAMyD,gBC0DbC,oNAxDbC,MAAQ,CACNC,QAAQ,EACRV,aAAS3B,KAGXsC,WAAa,WACX1E,EAAK2E,SAAS,CAACF,QAAQ,OAQzBG,OAAS,SAACC,GACR7E,EAAK6E,IAAMA,2EAQX,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAM2D,IAAKnE,KAAKiE,QAC7B5D,EAAAC,EAAAC,cAACgB,EAAW6C,SAAZ,CAAqBnD,MAAOjB,KAAK6D,OAC9B7D,KAAK6D,MAAMT,SAAWpD,KAAKN,MAAMZ,uDAcxC,IAAMsE,EAAUE,IAAEY,IAAIlE,KAAKkE,KAC3BlE,KAAKgE,SAAS,CAACZ,YACfiB,OAAOjF,iBAAiB,OAAQY,KAAK+D,2DAQrC/D,KAAK6D,MAAMT,QAAQkB,SACnBtE,KAAKgE,SAAS,CAACZ,aAAS3B,IACxB4C,OAAO7E,oBAAoB,OAAQQ,KAAK+D,mBArD1B7D,IAAMyD,gBC2DTjC,qLAtDX,OAAO,iDAWP1B,KAAKiD,SAASjD,KAAKN,kDAUFA,GACjBM,KAAKkD,YAAYxD,GACjBM,KAAKiD,SAASjD,KAAKN,sDAQnBM,KAAKkD,YAAYlD,KAAKN,wCAOfA,GAAO,IACP0D,EAAwB1D,EAAxB0D,QAASmB,EAAe7E,EAAf6E,OAAQC,EAAO9E,EAAP8E,IAExBxE,KAAKqD,MAAQ,IAAIC,IAAEmB,UAAUD,EAAKD,GAClCnB,EAAQK,SAASzD,KAAKqD,2CAOZ3D,GACVA,EAAM0D,QAAQM,YAAY1D,KAAKqD,cAxDXnD,IAAMyD,gBCyFfjC,+MA9EbgD,iBAAmB,WAAM,IAAA1D,EACS3B,EAAKK,MAA9B0D,EADgBpC,EAChBoC,QAASuB,EADO3D,EACP2D,aAEhB,GAAIA,EAAc,CAChB,IAAMC,EAASxB,EAAQyB,YAGvBF,EAFkBrB,IAAEwB,UAAUF,GACPG,uFAUzB,OAAO,iDAWP/E,KAAKgF,MACLhF,KAAKN,MAAM0D,QAAQ6B,GAAG,kBAAmBjF,KAAK0E,gDAO1C,IAAAQ,EACoBlF,KAAKN,MAAtB0D,EADH8B,EACG9B,QAAS+B,EADZD,EACYC,KACVP,EAASQ,EAAKP,UAAUM,GAC1BP,EAAOS,UACTjC,EAAQkC,UAAUV,GAElBxB,EAAQmC,SAAS,CAACC,QAAS,CAAC,EAAG,gDAWhB9F,GAAO,IAAA+F,EACDzF,KAAKN,MAArBoE,EADiB2B,EACjB3B,OAAQqB,EADSM,EACTN,KAOf,IALKzF,EAAMoE,QAAUA,IACnB9D,KAAKN,MAAM0D,QAAQsC,iBACnB1F,KAAKgF,OAGHG,IAASzF,EAAMyF,KAAM,CACvB,IAAMP,EAASQ,EAAKP,UAAUM,GAC1BP,EAAOS,YAAcT,EAAOe,OAAO3F,KAAK4E,UAC1C5E,KAAK4E,OAASA,EACd5E,KAAKgF,uDAUThF,KAAKN,MAAM0D,QAAQwC,IAAI,kBAAmB5F,KAAK0E,sDAlFhCS,GACf,OAAO7B,IAAEH,QAAQgC,GAAMN,mBAJR3E,IAAMC,YCOnB0F,EAAgB/F,OAAOC,KAAK+F,GAC5BC,EAAkBjG,OAAOC,KAAKiG,GAuFrBC,6MApFbpC,MAAQ,CACNqC,SAAU,GACVC,YAAaJ,EAAgB,GAC7BZ,KAAM,MAgDRiB,cAAgB,SAACrF,GAAD,OAAQ1B,EAAKwE,MAAMqC,SAASnF,MAE5CsF,WAAa,SAACtF,GAAD,OAAQ+E,EAAY/E,MAEjCuF,oBAAsB,SAACvF,GACrB1B,EAAK2E,SAAS,SAACH,GAAD,OAAA/D,OAAAyG,EAAA,EAAAzG,CAAA,GACT+D,EADS,CAEZqC,SAASpG,OAAAyG,EAAA,EAAAzG,CAAA,GACJ+D,EAAMqC,SADHpG,OAAA0G,EAAA,EAAA1G,CAAA,GAELiB,GAAM8C,EAAMqC,SAASnF,YAK5B0F,sBAAwB,SAACN,GACvB9G,EAAK2E,SAAS,CAACmC,mBAGjBzB,iBAAmB,SAACS,GAClB9F,EAAK2E,SAAS,CAACmB,YAGjBuB,cAAgB,SAACvD,EAASpC,GAAV,OAAiBV,EAAAC,EAAAC,cAACoG,EAAD,CAASxD,QAASA,EAASJ,IAAKhC,OAEjE6F,mBAAqB,SAAC7F,GAAD,OACnBV,EAAAC,EAAAC,cAACsG,EAAD,CAAc9D,IAAKhC,EAAID,SAAUzB,EAAKiH,oBAAqBvF,GAAIA,EAAIE,MAAO5B,EAAKwE,MAAMqC,cAGvFY,qBAAuB,SAAC/F,GAAD,OACrBV,EAAAC,EAAAC,cAACwG,EAAD,CAAgBhE,IAAKhC,EAAID,SAAUzB,EAAKoH,sBAAuB1F,GAAIA,EAAIE,MAAO5B,EAAKwE,MAAMsC,uFArEzF,OACE9F,EAAAC,EAAAC,cAACyG,EAAD,CAAQtG,KAAMV,KAAKiH,aAAcxG,KAAMT,KAAKkH,oDAK9C,IAAMC,EAActB,EAAcuB,OAAOpH,KAAKoG,eAAelC,IAAIlE,KAAKqG,YACtE,OACEhG,EAAAC,EAAAC,cAAC8G,EAAD,KACEhH,EAAAC,EAAAC,cAAC+G,EAActB,EAAchG,KAAK6D,MAAMsC,cACxC9F,EAAAC,EAAAC,cAACgH,EAAD,CAAM5C,aAAc3E,KAAK0E,iBAAkBS,KAAMgC,IAChDA,EAAYjD,IAAIlE,KAAK0G,qDAM1B,OACErG,EAAAC,EAAAC,cAACF,EAAAC,EAAMkH,SAAP,KACEnH,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,4BACCwF,EAAgB7B,IAAIlE,KAAK8G,uBAE5BzG,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,YAAUkH,KAAK,KACLC,UAAQ,EACR3G,GAAG,OACHI,KAAK,OACLwG,KAAK,KACL1G,MAAO2G,KAAKC,UAAU7H,KAAK6D,MAAMsB,UAAM1D,EAAW,MAE9DpB,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,yBACCsF,EAAc3B,IAAIlE,KAAK4G,6BA9CT1G,IAAMC,6CCZlB2H,EAAgB5H,IAAMsB,mBAAcC,GC+ElCsG,6MA3EblE,MAAQ,CACNmE,WAAY,IAAIC,6EAiChB,OACE5H,EAAAC,EAAAC,cAACuH,EAAc1D,SAAf,CAAwBnD,MAAOjB,KAAK6D,OACjC7D,KAAKN,MAAMZ,sDAahBkB,KAAKkI,yDAQLlI,KAAKmI,+CAGG,IACDH,EAAchI,KAAK6D,MAAnBmE,WACHA,EAAWI,mBACbJ,EAAWK,UAAUrI,KAAKsI,aAC1BN,EAAWE,gDAIF,IACJF,EAAchI,KAAK6D,MAAnBmE,WACPA,EAAWO,qBACXP,EAAWG,iDA/DK,IAAAnH,EACYhB,KAAKN,MAA1B8I,EADSxH,EACTwH,OAAQhE,EADCxD,EACDwD,IAAKiE,EADJzH,EACIyH,KACdC,EAAYX,EAAWW,UAG7B,MAAO,CACLA,YACAC,MAJYZ,EAAWa,SAASH,EAAMD,EAAQE,GAK9ClE,MACAiE,2CAIYA,EAAMD,EAAQE,GAC5B,IAAMG,EAAQ,GAAApG,OAAMgG,GAANhG,OAAaiG,GACrBI,EAAS,IAAIC,IAAM,UAAW,QAGpC,OAFAD,EAAOE,WAAWR,EAAQ,QAC1BM,EAAOG,OAAOJ,GACPC,EAAOI,QAAQ,yCArBtB,OAAOC,KAAKC,MAAMC,KAAKC,MAAQ,KAAMC,kBANhBrJ,IAAMC,eCGIA,ECL7BqJ,cAsBJ,SAAAA,EAAY9J,GAAO,IAAAL,EAAA,OAAAS,OAAAgC,EAAA,EAAAhC,CAAAE,KAAAwJ,IACjBnK,EAAAS,OAAAuC,EAAA,EAAAvC,CAAAE,KAAAF,OAAAwC,EAAA,EAAAxC,CAAA0J,GAAAjH,KAAAvC,KAAMN,KAtBR+J,kBAAehI,EAqBIpC,EAfnBqK,cAAgB,WACdrK,EAAKsK,eAcYtK,EAXnBuK,gBAAkB,WACZvK,EAAKK,MAAMmK,WAAaxK,EAAKK,MAAMmK,UAAUC,WAAazK,EAAKoK,cACjEpK,EAAKK,MAAMmK,UAAUC,UAAUzK,EAAKoK,eAWtCpK,EAAKwK,UAAL/J,OAAAyG,EAAA,EAAAzG,CAAA,GACKJ,EAAMmK,UADX,CAEEC,UAAWzK,EAAKuK,kBAJDvK,wEAajB,OAAO,iDAWPW,KAAKN,MAAMsI,WAAW/C,GAAG,UAAWjF,KAAK0J,eACzC1J,KAAK8J,0DAWepK,GACpB,OAAOA,EAAMqK,UAAY/J,KAAKN,MAAMqK,UAAY/J,KAAKyJ,0DAWrDzJ,KAAKgK,cACLhK,KAAK8J,2DAQL9J,KAAKN,MAAMsI,WAAWpC,IAAI,UAAW5F,KAAK0J,eAC1C1J,KAAKgK,kDAOK,IAAAhJ,EACoBhB,KAAKN,MAA5BsI,EADGhH,EACHgH,WAAY+B,EADT/I,EACS+I,QAEf/B,EAAWiC,gBAAkBjK,KAAKyJ,eACpCzJ,KAAKyJ,aAAezB,EAAW8B,UAAUC,EAAS/J,KAAK6J,kDASrD7J,KAAKyJ,eACPzJ,KAAKyJ,aAAaO,cAClBhK,KAAKyJ,aAAalB,qBAClBvI,KAAKyJ,aAAe,aAvGFvJ,IAAMC,WA4Gf+J,GDvGoB/J,ECuGTqJ,EDtGxB,SAAA7H,GAAA,SAAAwI,IAAA,IAAAtI,EAAAxC,EAAAS,OAAAgC,EAAA,EAAAhC,CAAAE,KAAAmK,GAAA,QAAApI,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAA/C,EAAAS,OAAAuC,EAAA,EAAAvC,CAAAE,MAAA6B,EAAA/B,OAAAwC,EAAA,EAAAxC,CAAAqK,IAAA5H,KAAAC,MAAAX,EAAA,CAAA7B,MAAAyC,OAAAP,MAMEQ,gBAAkB,SAACC,GAAD,OAAatC,EAAAC,EAAAC,cAACJ,EAADL,OAAA8C,OAAA,GAAevD,EAAKK,MAAWiD,KANhEtD,EAAA,OAAAS,OAAA+C,EAAA,EAAA/C,CAAAqK,EAAAxI,GAAA7B,OAAAgD,EAAA,EAAAhD,CAAAqK,EAAA,EAAApH,IAAA,SAAA9B,MAAA,WAaI,OAAOZ,EAAAC,EAAAC,cAACuH,EAAc9E,SAAf,KAAyBhD,KAAK0C,qBAbzCyH,EAAA,CAAyCjK,IAAMC,iCEH1CmD,IAAE8G,KAAKC,QAAQC,UAAUC,YAChCjH,IAAE8G,KAAKC,QAAQG,aAAa,CAC1BhK,UAAW,SACXiK,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,UA6DNhJ,gMAjDX1B,KAAKiD,SAASjD,KAAKN,oDAWnBM,KAAKqD,MAAMwH,UAAUvH,IAAEC,QAAQuH,eAAe9K,KAAKN,MAAMqL,uDAQzD/K,KAAKkD,YAAYlD,KAAKN,wCAOfA,GAAO,IACPqL,EAAkBrL,EAAlBqL,MAAO3H,EAAW1D,EAAX0D,QACdpD,KAAKqD,MAAQC,IAAE0H,OAAO1H,IAAEC,QAAQuH,eAAeC,IAC/C3H,EAAQK,SAASzD,KAAKqD,2CAOZ3D,GACVA,EAAM0D,QAAQM,YAAY1D,KAAKqD,wCAQ/B,OAAO,YAtDUnD,IAAMyD,gBCHrBwD,EAAcrH,OAAOC,KAAK+F,GAAa5B,IAAI,SAACnD,GAAD,OAAQ+E,EAAY/E,KAE/DkK,6MASJpH,MAAQ,KAERqH,cAAgB,SAACC,GACf9L,EAAK2E,SAAS,CAAC+G,MAAOI,EAAQC,UAGhCvB,UAAY,CACVsB,QAAS9L,EAAK6L,uFAQd,OACE7K,EAAAC,EAAAC,cAAC8K,EAAD,CAAY7C,OAAQF,EAAYE,OAAQhE,IAAK8D,EAAY9D,IAAKiE,KAAMzI,KAAKN,MAAM+I,MAC7EpI,EAAAC,EAAAC,cAAC8G,EAAD,KACEhH,EAAAC,EAAAC,cAAC+G,EAActB,EAAcsF,QAC7BjL,EAAAC,EAAAC,cAACgH,EAAD,CAAMpC,KAAMgC,IACXnH,KAAKuL,eAERlL,EAAAC,EAAAC,cAACiL,EAAD,CAAWzB,QAAQ,sBAAsBF,UAAW7J,KAAK6J,mDAM7D,GAAI7J,KAAK6D,MAAMkH,MACb,OAAO1K,EAAAC,EAAAC,cAACkL,EAAD,CAAQV,MAAO/K,KAAK6D,MAAMkH,eAtCX7K,IAAMC,WAA5B8K,EAKGtK,aAAe,CACpB8H,KAAM,QAqCKwC,gBClDTS,cAqBJ,SAAAA,EAAYhM,GAAO,IAAAL,EAAA,OAAAS,OAAAgC,EAAA,EAAAhC,CAAAE,KAAA0L,IACjBrM,EAAAS,OAAAuC,EAAA,EAAAvC,CAAAE,KAAAF,OAAAwC,EAAA,EAAAxC,CAAA4L,GAAAnJ,KAAAvC,KAAMN,KAZRmE,MAAQ,CACN8H,SAAU,GAUOtM,EAWnBuM,YAAc,WACRvM,EAAKwM,UACPC,aAAazM,EAAKwM,SAClBxM,EAAKwM,aAAUpK,IAdApC,EAkBnB0M,YAAc,WACZ1M,EAAK2M,YAnBY3M,EAsBnB4M,WAAa,WACX5M,EAAKuM,cACLvM,EAAK2E,SAAS,CAAC2H,SAAU,IACzBtM,EAAK6M,QAAQ,IAzBI7M,EA4BnBuK,gBAAkB,SAACH,GACjBpK,EAAKoK,aAAeA,GA7BHpK,EAgCnB8M,YAAc,SAACtI,GAAD,OAAA/D,OAAAyG,EAAA,EAAAzG,CAAA,GACT+D,EADS,CAEZ8H,SAAU9H,EAAM8H,SAAW,KAhC3BtM,EAAK+M,YAActG,EAAYuG,KAAKD,YACpC/M,EAAKwK,UAAY,CACfC,UAAWzK,EAAKuK,iBAElBvK,EAAK4C,OAAS5C,EAAK+M,YAAYnK,OAC/B5C,EAAKsM,SAAW,EAChBtM,EAAK2M,SAAW3M,EAAKiN,KAAKC,KAAVzM,OAAA0M,EAAA,EAAA1M,QAAA0M,EAAA,EAAA1M,CAAAT,KARCA,wEA0CjB,OACEgB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQkM,QAASzM,KAAK+L,aAAtB,SACC,IACD1L,EAAAC,EAAAC,cAAA,UAAQkM,QAASzM,KAAK4L,aAAtB,SACC,IACDvL,EAAAC,EAAAC,cAAA,UAAQkM,QAASzM,KAAKiM,YAAtB,SAEF5L,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,YAAUmH,UAAQ,EAACzG,MAAO2G,KAAKC,UAAU7H,KAAKoM,YAAYpM,KAAK6D,MAAM8H,cAEvEtL,EAAAC,EAAAC,cAAC8K,EAAD,CAAY7C,OAAQF,EAAYE,OAAQhE,IAAK8D,EAAY9D,IAAKiE,KAAMzI,KAAKN,MAAM+I,MAC7EpI,EAAAC,EAAAC,cAACiL,EAAD,CAAWzB,QAAQ,sBAAsBF,UAAW7J,KAAK6J,6CAO3D7J,KAAK6D,MAAM8H,SAAW3L,KAAKiC,SAC7BjC,KAAK6L,QAAUa,WAAW1M,KAAKgM,SAAUhM,KAAKN,MAAMiN,UACpD3M,KAAKkM,QAAQlM,KAAK6D,MAAM8H,UACxB3L,KAAKgE,SAAShE,KAAKmM,8CAIfR,GACN,GAAI3L,KAAKyJ,aAAc,CACrB,IAAMsB,EAAQ/K,KAAKoM,YAAYT,GAC/B3L,KAAKyJ,aAAamD,QAAQ7B,WA/FF7K,IAAMC,WAA9BuL,EAKG/K,aAAe,CACpBgM,SAAU,IACVlE,KAAM,QA6FKiD,mDC/FTmB,UAAY,CAChBC,cAAe,CACbC,UAAW9G,EACX9E,KAAM,aACN6L,KAAM,gBAERC,iBAAkB,CAChBF,UAAW9B,EACX9J,KAAM,gBACN6L,KAAM,mBAERE,mBAAoB,CAClBH,UAAWrB,EACXvK,KAAM,kBACN6L,KAAM,uBAIJG,GAAYrN,OAAOC,KAAK8M,IAsDfO,8MAnDbvJ,MAAQ,CACNwJ,SAAS,KAGXC,UAAY,SAAC7N,GACPA,EAAE8N,QACJlO,EAAK2E,SAAS3E,EAAKmO,cAIvB7N,QAAU,CACR8N,QAAS,CACPC,GAAIrO,EAAKiO,cAIbE,UAAY,SAAC3J,GAAD,OAAA/D,OAAAyG,EAAA,EAAAzG,CAAA,GACP+D,EADO,CAEVwJ,SAAUxJ,EAAMwJ,aA4BlBM,WAAa,SAACC,GAAD,OAAavN,EAAAC,EAAAC,cAACsN,GAAA,EAAD,CAAMrN,UAAU,gBAAgBuC,IAAK6K,EAASE,GAAIjB,GAAUe,GAASZ,MAAOH,GAAUe,GAASzM,SAEzH4M,YAAc,SAACH,GAAD,OAAavN,EAAAC,EAAAC,cAACyN,EAAA,EAAD,CAAOjB,UAAWF,GAAUe,GAASb,UAAWhK,IAAK6K,EAASZ,KAAMH,GAAUe,GAASZ,gFA1BhH,OACE3M,EAAAC,EAAAC,cAAC0N,GAAA,EAAD,CAAQC,QAASA,GACf7N,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC3B,EAAD,CAAIG,UAAWiB,KAAK6D,MAAMwJ,SACxBhN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACV2M,GAAUjJ,IAAIlE,KAAK2N,cAG1BtN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,KACGhB,GAAUjJ,IAAIlE,KAAK+N,aACpB1N,EAAAC,EAAAC,cAAC6N,GAAA,EAAD,CAAUN,GAAIjB,GAAUM,GAAU,IAAIH,SAG1C3M,EAAAC,EAAAC,cAAC8N,EAAD,CAAY1O,QAASK,KAAKL,gDAOhC,OAAO,YA5COO,IAAMC,uCCnBJmO,QACW,cAA7BjK,OAAOkK,SAASC,UAEa,UAA7BnK,OAAOkK,SAASC,UAEhBnK,OAAOkK,SAASC,SAASC,MACvB,2DCZJC,KAASC,OAAOtO,EAAAC,EAAAC,cAACqO,GAAD,MAASzP,SAAS0P,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.27ddded3.chunk.js","sourcesContent":["import {createHashHistory} from 'history';\n\nexport default createHashHistory();\n","export default function If({children, condition}) {\n  return condition && children;\n}\n","import React from 'react';\n\nclass KeyHandler extends React.Component {\n  /**\n   * Добавление слушателей нажатий клавиш.\n   * @param {string} eventName Название события.\n   * @return {undefined}\n   */\n  handlerAdd = (eventName) => {\n    document.addEventListener(eventName, this.handler);\n  };\n\n  /**\n   * Удаление слушателей нажатий клавиш.\n   * @param {string} eventName Название события.\n   * @return {undefined}\n   */\n  handlerRemove = (eventName) => {\n    document.removeEventListener(eventName, this.handler);\n  };\n\n  /**\n   * Обработчик нажатия клавиш.\n   * @param {*} e Событие.\n   * @return {function(*=)} Обработчик нажатия клавиш.\n   */\n  handler = (e) => {\n    if (this.props.keyList[e.type]) {\n      if (this.props.keyList[e.type][e.keyCode]) {\n        this.props.keyList[e.type][e.keyCode](e);\n      }\n    }\n  };\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    Object.keys(this.props.keyList).forEach(this.handlerAdd);\n  }\n\n  /**\n   * Должен ли компонент обновиться?\n   * На самом деле, обычно реакт сам отлично разбирается.\n   * Но иногда ручное управление позволяет существенно ускорить работу в \"узких местах\".\n   * @param {*} props Новые свойства.\n   // * @param {*} nextState Новое состояние.\n   * @return {boolean} Должен ли компонент обновиться?\n   */\n  shouldComponentUpdate(props) {\n    Object.keys(this.props.keyList).forEach(this.handlerRemove);\n    Object.keys(props.keyList).forEach(this.handlerAdd);\n    return false;\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    Object.keys(this.props.keyList).forEach(this.handlerRemove);\n  }\n}\n\nexport default KeyHandler;\n","import 'modules/common/components/Layout.css';\nimport React from 'react';\n\nclass Layout extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    main: () => <div>Main</div>,\n    side: () => <div>Side</div>,\n  };\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return (\n      <div className=\"layout\">\n        <div className=\"layout__side\">{this.props.side}</div>\n        <div className=\"layout__main\">{this.props.main}</div>\n      </div>\n    );\n  }\n}\n\nexport default Layout;\n","import 'modules/example-map/components/GeoJSONField.css';\nimport React from 'react';\n\nclass GeoJSONField extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    onChange: () => {\n    },\n    value: {},\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    const {id, value} = this.props;\n    return (\n      <label className=\"geo-json\" htmlFor={id}>\n        <input id={id} name=\"tile\" onChange={this.handleChange} defaultChecked={value[id]} type=\"checkbox\" />\n        {id}\n      </label>\n    );\n  }\n\n  handleChange = () => {\n    this.props.onChange(this.props.id);\n  };\n}\n\nexport default GeoJSONField;\n","import 'modules/example-map/components/TileLayerField.css';\nimport React from 'react';\n\nclass TileLayerField extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    onChange: () => {\n    },\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    const {id, value} = this.props;\n    return (\n      <label className=\"tile-radio\" htmlFor={id}>\n        <input id={id} name=\"tile\" onChange={this.handleChange} checked={value === id} type=\"radio\" />\n        {id}\n      </label>\n    );\n  }\n\n  handleChange = () => {\n    this.props.onChange(this.props.id);\n  };\n}\n\nexport default TileLayerField;\n","import React from 'react';\n\nexport const MapContext = React.createContext(undefined);\n","import {MapContext} from 'modules/map/context/MapContext.js';\nimport React from 'react';\n\n/**\n * Передать map в компонент.\n * @param {*} Component Компонент.\n * @return {*} Компонент.\n */\nexport default function withMap(Component) {\n  return class ComponentWithMap extends React.Component {\n    /**\n     * Вывести детей.\n     * @param {number} context Контекст.\n     * @return {*} Представление.\n     */\n    renderComponent = (context) => <Component {...this.props} {...context} />;\n\n    /**\n     * Отображение компонента\n     * @return {*} Представление компонента.\n     */\n    render() {\n      return <MapContext.Consumer>{this.renderComponent}</MapContext.Consumer>;\n    }\n  };\n}\n","import L from 'leaflet';\nimport withMap from 'modules/map/hoc/withMap.jsx';\nimport React from 'react';\n\nclass GeoJSON extends React.PureComponent {\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   * @param {*} props Предыдущие свойства.\n   // * @param {*} state Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate(props) {\n    this.layerDelete(props);\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.layerDelete(this.props);\n  }\n\n  /**\n   * Добавить слой.\n   * @return {undefined}\n   */\n  layerAdd(props) {\n    const {geoJSON, leaflet} = props;\n    this.layer = L.GeoJSON.geometryToLayer(geoJSON);\n    leaflet.addLayer(this.layer);\n  }\n\n  /**\n   * Удалить слой.\n   * @return {undefined}\n   */\n  layerDelete(props) {\n    props.leaflet.removeLayer(this.layer);\n  }\n}\n\nexport default withMap(GeoJSON);\n","import L from 'leaflet';\nimport 'modules/map/components/Map.css';\nimport {MapContext} from 'modules/map/context/MapContext.js';\nimport React from 'react';\n\nclass Map extends React.PureComponent {\n  state = {\n    isLoad: false,\n    leaflet: undefined,\n  };\n\n  handleLoad = () => {\n    this.setState({isLoad: true});\n  };\n\n  /**\n   * Получить ref.\n   * @param {*} map ref.\n   * @return {undefined}\n   */\n  refMap = (map) => {\n    this.map = map;\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <div className=\"map\" ref={this.refMap}>\n        <MapContext.Provider value={this.state}>\n          {this.state.leaflet && this.props.children}\n        </MapContext.Provider>\n      </div>\n    );\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    const leaflet = L.map(this.map);\n    this.setState({leaflet});\n    window.addEventListener('load', this.handleLoad);\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.state.leaflet.remove();\n    this.setState({leaflet: undefined});\n    window.removeEventListener('load', this.handleLoad);\n  }\n}\n\nexport default Map;\n","import L from 'leaflet';\nimport withMap from 'modules/map/hoc/withMap.jsx';\nimport React from 'react';\n\nclass TileLayer extends React.PureComponent {\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   * @param {*} props Предыдущие свойства.\n   // * @param {*} state Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate(props) {\n    this.layerDelete(props);\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.layerDelete(this.props);\n  }\n\n  /**\n   * Добавить слой.\n   * @return {undefined}\n   */\n  layerAdd(props) {\n    const {leaflet, params, url} = props;\n\n    this.layer = new L.TileLayer(url, params);\n    leaflet.addLayer(this.layer);\n  }\n\n  /**\n   * Удалить слой.\n   * @return {undefined}\n   */\n  layerDelete(props) {\n    props.leaflet.removeLayer(this.layer);\n  }\n}\n\nexport default withMap(TileLayer);\n","import L from 'leaflet';\nimport withMap from \"modules/map/hoc/withMap.jsx\";\nimport React from 'react';\n\nclass View extends React.Component {\n  bounds;\n\n  static getBounds(view) {\n    return L.geoJSON(view).getBounds();\n  }\n\n  /**\n   * Обработать смену положения карты\n   * @return {undefined}\n   */\n  handleViewChange = () => {\n    const {leaflet, onViewChange} = this.props;\n\n    if (onViewChange) {\n      const bounds = leaflet.getBounds();\n      const rectangle = L.rectangle(bounds);\n      const view = rectangle.toGeoJSON();\n      onViewChange(view);\n    }\n  };\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.fly();\n    this.props.leaflet.on('moveend zoomend', this.handleViewChange);\n  }\n\n  /**\n   * Перейти к виду\n   * @return {undefined}\n   */\n  fly() {\n    const {leaflet, view} = this.props;\n    const bounds = View.getBounds(view);\n    if (bounds.isValid()) {\n      leaflet.fitBounds(bounds);\n    } else {\n      leaflet.fitWorld({padding: [0, 0]});\n    }\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   * @param {*} props - Предыдущие свойства.\n   // * @param {*} state - Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate(props) {\n    const {isLoad, view} = this.props;\n\n    if (!props.isLoad && isLoad) {\n      this.props.leaflet.invalidateSize();\n      this.fly();\n    }\n\n    if (view !== props.view) {\n      const bounds = View.getBounds(view);\n      if (bounds.isValid() && !bounds.equals(this.bounds)) {\n        this.bounds = bounds;\n        this.fly();\n      }\n    }\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.props.leaflet.off('moveend zoomend', this.handleViewChange);\n  }\n}\n\nexport default withMap(View);\n","import Layout from 'modules/common/components/Layout.jsx';\nimport GeoJSONField from \"modules/example-map/components/GeoJSONField.jsx\";\nimport TileLayerField from 'modules/example-map/components/TileLayerField.jsx';\nimport geoJSONData from 'modules/example-map/data/geo-json.json';\nimport tileLayerData from 'modules/example-map/data/tile-layer.json';\nimport GeoJSON from 'modules/map/components/GeoJSON.jsx';\nimport Map from \"modules/map/components/Map.jsx\";\nimport TileLayer from 'modules/map/components/TileLayer.jsx';\nimport View from 'modules/map/components/View.jsx';\nimport React from 'react';\n\nconst geoJSONIdList = Object.keys(geoJSONData);\nconst tileLayerIdList = Object.keys(tileLayerData);\n\nclass ExampleMap extends React.Component {\n  state = {\n    showData: {},\n    tileLayerId: tileLayerIdList[0],\n    view: {},\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <Layout main={this.renderMain()} side={this.renderSide()} />\n    );\n  }\n\n  renderMain() {\n    const geoJSONList = geoJSONIdList.filter(this.filterGeoJSON).map(this.getGeoJSON);\n    return (\n      <Map>\n        <TileLayer {...tileLayerData[this.state.tileLayerId]} />\n        <View onViewChange={this.handleViewChange} view={geoJSONList} />\n        {geoJSONList.map(this.renderGeoJSON)}\n      </Map>\n    );\n  }\n\n  renderSide() {\n    return (\n      <React.Fragment>\n        <fieldset>\n          <legend>Tile layer</legend>\n          {tileLayerIdList.map(this.renderTileLayerField)}\n        </fieldset>\n        <fieldset>\n          <legend>View</legend>\n          <textarea cols=\"31\"\n                    disabled\n                    id=\"view\"\n                    name=\"view\"\n                    rows=\"31\"\n                    value={JSON.stringify(this.state.view, undefined, 2)} />\n        </fieldset>\n        <fieldset>\n          <legend>GeoJSON</legend>\n          {geoJSONIdList.map(this.renderGeoJSONField)}\n        </fieldset>\n      </React.Fragment>\n    );\n  }\n\n  filterGeoJSON = (id) => this.state.showData[id];\n\n  getGeoJSON = (id) => geoJSONData[id];\n\n  handleGeoJSONChange = (id) => {\n    this.setState((state) => ({\n      ...state,\n      showData: {\n        ...state.showData,\n        [id]: !state.showData[id],\n      },\n    }));\n  };\n\n  handleTileLayerChange = (tileLayerId) => {\n    this.setState({tileLayerId});\n  };\n\n  handleViewChange = (view) => {\n    this.setState({view});\n  };\n\n  renderGeoJSON = (geoJSON, id) => <GeoJSON geoJSON={geoJSON} key={id} />;\n\n  renderGeoJSONField = (id) => (\n    <GeoJSONField key={id} onChange={this.handleGeoJSONChange} id={id} value={this.state.showData} />\n  );\n\n  renderTileLayerField = (id) => (\n    <TileLayerField key={id} onChange={this.handleTileLayerChange} id={id} value={this.state.tileLayerId} />\n  );\n}\n\nexport default ExampleMap;\n","import React from 'react';\n\nexport const SocketContext = React.createContext(undefined);\n","import CentrifugeJS from 'centrifuge';\nimport JsSHA from 'jssha';\nimport {SocketContext} from \"modules/centrifuge/context/SocketContext.js\";\nimport React from 'react';\n\nclass Centrifuge extends React.Component {\n  state = {\n    centrifuge: new CentrifugeJS(),\n  };\n\n  static get timestamp() {\n    return Math.round(Date.now() / 1000).toString();\n  }\n\n  get connectData() {\n    const {secret, url, user} = this.props;\n    const timestamp = Centrifuge.timestamp;\n    const token = Centrifuge.getToken(user, secret, timestamp);\n\n    return {\n      timestamp,\n      token,\n      url,\n      user,\n    };\n  }\n\n  static getToken(user, secret, timestamp) {\n    const hmacBody = `${user}${timestamp}`;\n    const shaObj = new JsSHA(\"SHA-256\", \"TEXT\");\n    shaObj.setHMACKey(secret, \"TEXT\");\n    shaObj.update(hmacBody);\n    return shaObj.getHMAC(\"HEX\");\n  }\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return (\n      <SocketContext.Provider value={this.state}>\n        {this.props.children}\n      </SocketContext.Provider>\n    );\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.connect();\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.disconnect();\n  }\n\n  connect() {\n    const {centrifuge} = this.state;\n    if (centrifuge.isDisconnected()) {\n      centrifuge.configure(this.connectData);\n      centrifuge.connect();\n    }\n  }\n\n  disconnect() {\n    const {centrifuge} = this.state;\n    centrifuge.removeAllListeners();\n    centrifuge.disconnect();\n  }\n}\n\nexport default Centrifuge;\n","import {SocketContext} from 'modules/centrifuge/context/SocketContext.js';\nimport React from 'react';\n\n/**\n * Передать map в компонент.\n * @param {*} Component Компонент.\n * @return {*} Компонент.\n */\nexport default function withSocket(Component) {\n  return class ComponentWithSocket extends React.Component {\n    /**\n     * Вывести детей.\n     * @param {number} context Контекст.\n     * @return {*} Представление.\n     */\n    renderComponent = (context) => <Component {...this.props} {...context} />;\n\n    /**\n     * Отображение компонента\n     * @return {*} Представление компонента.\n     */\n    render() {\n      return <SocketContext.Consumer>{this.renderComponent}</SocketContext.Consumer>;\n    }\n  };\n}\n","import withSocket from \"modules/centrifuge/hoc/withSocket.jsx\";\nimport React from 'react';\n\nclass Subscribe extends React.Component {\n  subscription = undefined;\n\n  /**\n   * Обработать подкулючение.\n   * @return {undefined}\n   */\n  handleConnect = () => {\n    this.forceUpdate();\n  };\n\n  handleSubscribe = () => {\n    if (this.props.eventData && this.props.eventData.subscribe && this.subscription) {\n      this.props.eventData.subscribe(this.subscription);\n    }\n  };\n\n  /**\n   * Конструктор компонента.\n   * @param {*} props Свойства переданые в компонент.\n   * @return {undefined}\n   */\n  constructor(props) {\n    super(props);\n    this.eventData = {\n      ...props.eventData,\n      subscribe: this.handleSubscribe,\n    };\n  }\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.props.centrifuge.on('connect', this.handleConnect);\n    this.subscribe();\n  }\n\n  /**\n   * Должен ли компонент обновиться?\n   * На самом деле, обычно реакт сам отлично разбирается.\n   * Но иногда ручное управление позволяет существенно ускорить работу в \"узких местах\".\n   * @param {*} props Новые свойства.\n   // * @param {*} state Новое состояние.\n   * @return {boolean} Должен ли компонент обновиться?\n   */\n  shouldComponentUpdate(props) {\n    return props.channel !== this.props.channel || !this.subscription;\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   // * @param {*} props Предыдущие свойства.\n   // * @param {*} state Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate() {\n    this.unsubscribe();\n    this.subscribe();\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.props.centrifuge.off('connect', this.handleConnect);\n    this.unsubscribe();\n  }\n\n  /**\n   * Подписаться.\n   * @return {void}\n   */\n  subscribe() {\n    const {centrifuge, channel} = this.props;\n\n    if (centrifuge.isConnected() && !this.subscription) {\n      this.subscription = centrifuge.subscribe(channel, this.eventData);\n    }\n  }\n\n  /**\n   * Отписаться.\n   * @return {void}\n   */\n  unsubscribe() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription.removeAllListeners();\n      this.subscription = null;\n    }\n  }\n}\n\nexport default withSocket(Subscribe);\n","import L from 'leaflet';\nimport 'modules/map/components/Marker.css';\nimport withMap from 'modules/map/hoc/withMap.jsx';\nimport React from 'react';\n\n// Фикс иконок на картах\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  className: 'marker',\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nclass Marker extends React.PureComponent {\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   // * @param {*} props Предыдущие свойства.\n   // * @param {*} state Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate() {\n    this.layer.setLatLng(L.GeoJSON.coordsToLatLng(this.props.point));\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.layerDelete(this.props);\n  }\n\n  /**\n   * Добавить слой.\n   * @return {undefined}\n   */\n  layerAdd(props) {\n    const {point, leaflet} = props;\n    this.layer = L.marker(L.GeoJSON.coordsToLatLng(point));\n    leaflet.addLayer(this.layer);\n  }\n\n  /**\n   * Удалить слой.\n   * @return {undefined}\n   */\n  layerDelete(props) {\n    props.leaflet.removeLayer(this.layer);\n  }\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n}\n\nexport default withMap(Marker);\n","import Centrifuge from \"modules/centrifuge/components/Centrifuge.jsx\";\nimport Subscribe from 'modules/centrifuge/components/Subscribe.jsx';\nimport geoJSONData from 'modules/example-map/data/geo-json.json';\nimport tileLayerData from \"modules/example-map/data/tile-layer.json\";\nimport connectData from 'modules/example-socket/data/connect.json';\nimport Map from \"modules/map/components/Map.jsx\";\nimport Marker from \"modules/map/components/Marker.jsx\";\nimport TileLayer from \"modules/map/components/TileLayer.jsx\";\nimport View from \"modules/map/components/View.jsx\";\nimport React from 'react';\n\nconst geoJSONList = Object.keys(geoJSONData).map((id) => geoJSONData[id]);\n\nclass ExampleSocket extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    user: 'user',\n  };\n\n  state = {};\n\n  handleMessage = (message) => {\n    this.setState({point: message.data});\n  };\n\n  eventData = {\n    message: this.handleMessage,\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <Centrifuge secret={connectData.secret} url={connectData.url} user={this.props.user}>\n        <Map>\n          <TileLayer {...tileLayerData.Stamen} />\n          <View view={geoJSONList} />\n          {this.renderPoint()}\n        </Map>\n        <Subscribe channel=\"userstory-to-devpro\" eventData={this.eventData} />\n      </Centrifuge>\n    );\n  }\n\n  renderPoint() {\n    if (this.state.point) {\n      return <Marker point={this.state.point} />;\n    }\n  }\n}\n\nexport default ExampleSocket;\n","import Centrifuge from \"modules/centrifuge/components/Centrifuge.jsx\";\nimport Subscribe from \"modules/centrifuge/components/Subscribe.jsx\";\nimport geoJSONData from \"modules/example-map/data/geo-json.json\";\nimport connectData from 'modules/example-socket/data/connect.json';\nimport React from 'react';\n\nclass SocketGenerator extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    interval: 150,\n    user: 'user',\n  };\n\n  state = {\n    position: 0,\n  };\n\n  subscription;\n\n  /**\n   * Конструктор компонента.\n   * @param {*} props Свойства переданые в компонент.\n   * @return {undefined}\n   */\n  constructor(props) {\n    super(props);\n    this.coordinates = geoJSONData.Path.coordinates;\n    this.eventData = {\n      subscribe: this.handleSubscribe\n    };\n    this.length = this.coordinates.length;\n    this.position = 0;\n    this.tickBind = this.tick.bind(this);\n  }\n\n  handlePause = () => {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = undefined;\n    }\n  };\n\n  handleStart = () => {\n    this.tickBind();\n  };\n\n  handleStop = () => {\n    this.handlePause();\n    this.setState({position: 0});\n    this.process(0);\n  };\n\n  handleSubscribe = (subscription) => {\n    this.subscription = subscription;\n  };\n\n  setPosition = (state) => ({\n    ...state,\n    position: state.position + 1,\n  });\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <div>\n        <fieldset>\n          <legend>Control</legend>\n          <button onClick={this.handleStart}>Start</button>\n          {' '}\n          <button onClick={this.handlePause}>Pause</button>\n          {' '}\n          <button onClick={this.handleStop}>Stop</button>\n        </fieldset>\n        <fieldset>\n          <legend>Current</legend>\n          <textarea disabled value={JSON.stringify(this.coordinates[this.state.position])} />\n        </fieldset>\n        <Centrifuge secret={connectData.secret} url={connectData.url} user={this.props.user}>\n          <Subscribe channel=\"userstory-to-devpro\" eventData={this.eventData} />\n        </Centrifuge>\n      </div>\n    );\n  }\n\n  tick() {\n    if (this.state.position < this.length) {\n      this.timeout = setTimeout(this.tickBind, this.props.interval);\n      this.process(this.state.position);\n      this.setState(this.setPosition);\n    }\n  }\n\n  process(position) {\n    if (this.subscription) {\n      const point = this.coordinates[position];\n      this.subscription.publish(point);\n    }\n  }\n}\n\nexport default SocketGenerator;\n","import history from 'app/history.js';\nimport If from \"modules/common/components/If.jsx\";\nimport KeyHandler from \"modules/common/components/KeyHandler.jsx\";\nimport ExampleMap from 'modules/example-map/components/ExampleMap.jsx';\nimport ExampleSocket from \"modules/example-socket/components/ExampleSocket.jsx\";\nimport SocketGenerator from \"modules/example-socket/components/SocketGenerator.jsx\";\nimport React from 'react';\nimport {Redirect, Route, Switch} from \"react-router\";\nimport {Link, Router} from 'react-router-dom';\nimport './style.css';\n\nconst routeData = {\n  'example-map': {\n    component: ExampleMap,\n    name: 'ExampleMap',\n    path: '/example-map',\n  },\n  'example-socket': {\n    component: ExampleSocket,\n    name: 'ExampleSocket',\n    path: '/example-socket',\n  },\n  'socket-generator': {\n    component: SocketGenerator,\n    name: 'SocketGenerator',\n    path: '/socket-generator',\n  },\n};\n\nconst routeList = Object.keys(routeData);\n\nclass App extends React.Component {\n  state = {\n    showNav: false,\n  };\n\n  handleKey = (e) => {\n    if (e.altKey) {\n      this.setState(this.toggleNav)\n    }\n  };\n\n  keyList = {\n    keydown: {\n      78: this.handleKey,\n    },\n  };\n\n  toggleNav = (state) => ({\n    ...state,\n    showNav: !state.showNav,\n  });\n\n  render() {\n    return (\n      <Router history={history}>\n        <div className=\"app\">\n          <If condition={this.state.showNav}>\n            <div className=\"app__nav\">\n                {routeList.map(this.renderLink)}\n            </div>\n          </If>\n          <div className=\"app__content\">\n            <Switch>\n              {routeList.map(this.renderRoute)}\n              <Redirect to={routeData[routeList[0]].path} />\n            </Switch>\n          </div>\n          <KeyHandler keyList={this.keyList} />\n        </div>\n      </Router>\n    );\n  }\n\n  renderNav() {\n    return null;\n  }\n\n  renderLink = (routeId) => <Link className=\"app__nav-link\" key={routeId} to={routeData[routeId].path}>{routeData[routeId].name}</Link>;\n\n  renderRoute = (routeId) => <Route component={routeData[routeId].component} key={routeId} path={routeData[routeId].path} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import App from 'app/index.jsx';\nimport 'index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n  module.hot.accept('app/index.jsx', () => ReactDOM.render(<App />, document.getElementById('root')));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}