{"version":3,"sources":["app/history.js","modules/common/containers/KeyHandler/index.jsx","modules/example-key/components/Key/index.jsx","modules/example-key/containers/ExampleKey/index.jsx","modules/common/containers/Layout/index.jsx","modules/example-map/components/GeoJSONItem/index.jsx","modules/example-map/components/TileLayerItem/index.jsx","modules/map/context/index.js","modules/map/hoc/withMap/index.jsx","modules/map/containers/GeoJSON/index.jsx","modules/map/containers/Map/index.jsx","modules/map/containers/TileLayer/index.jsx","modules/map/containers/View/index.jsx","modules/example-map/containers/ExampleMap/index.jsx","modules/centrifuge/context/index.js","modules/centrifuge/containers/Centrifuge/index.jsx","modules/centrifuge/hoc/withSocket/index.jsx","modules/centrifuge/containers/Subscribe/index.jsx","modules/map/containers/Marker/index.jsx","modules/example-socket/containers/ExampleSocket/index.jsx","modules/example-socket/containers/SocketGeneratorInner/index.jsx","modules/example-socket/containers/SocketGenerator/index.jsx","app/index.jsx","serviceWorker.js","index.js"],"names":["createHashHistory","KeyHandler","handlerAdd","eventName","document","addEventListener","_this","handler","handlerRemove","removeEventListener","e","props","keyList","type","keyCode","Object","keys","this","forEach","React","Component","Key","_this$props","id","classList","isActive","push","react_default","a","createElement","className","join","defaultProps","ExampleKey","state","handleKey","setState","objectSpread","defineProperty","setTimeout","clearKeyEvents","keydown","_keydown","Alt","Backspace","Control","Delete","Down","End","Enter","Esc","Home","Insert","Left","PageDown","PageUp","Right","Shift","Up","renderKey","key","components_Key","map","containers_KeyHandler","Layout","side","main","GeoJSONItem","handleChange","onChange","value","htmlFor","name","defaultChecked","TileLayerItem","checked","MapContext","createContext","undefined","withMap","_React$Component","ComponentWithMap","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","renderComponent","context","assign","inherits","createClass","Consumer","layerAdd","layerDelete","geoJSON","leaflet","layer","L","GeoJSON","geometryToLayer","addLayer","removeLayer","PureComponent","Map","isLoad","handleClick","marker","latlng","toGeoJSON","console","log","JSON","stringify","handleLoad","refMap","ref","Provider","children","on","window","off","remove","params","url","TileLayer","handleViewChange","onViewChange","bounds","View","getBoundsClean","getBounds","rectangle","fly","_this$props2","view","isValid","fitBounds","fitWorld","padding","_this$props3","invalidateSize","equals","nextBounds","getBoundsNext","geoJSONIdList","geoJSONData","tileLayerIdList","tileLayerData","ExampleMap","showData","tileLayerId","filterGeoJSON","getGeoJSON","handleGeoJSONChange","handleTileLayerChange","renderGeoJSON","containers_GeoJSON","renderGeoJSONItem","components_GeoJSONItem","renderTileLayer","components_TileLayerItem","containers_Layout","renderMain","renderSide","geoJSONList","filter","containers_Map","containers_TileLayer","containers_View","Fragment","cols","disabled","rows","SocketContext","Centrifuge","centrifuge","CentrifugeJS","connect","isDisconnected","configure","connectData","disconnect","removeAllListeners","secret","user","timestamp","token","getToken","hmacBody","shaObj","JsSHA","setHMACKey","update","getHMAC","Math","round","Date","now","toString","withSocket","ComponentWithSocket","handleMessage","_ref","data","onMessage","handleSubscribe","subscription","eventData","message","subscribe","handleConnect","forceUpdate","channel","unsubscribe","isConnected","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","setLatLng","coordsToLatLng","point","ExampleSocket","containers_Centrifuge","Stamen","renderPoint","containers_Subscribe","Marker","SocketGeneratorInner","position","setPosition","handleStart","tickBind","handlePause","timeout","clearTimeout","handleStop","process","coordinates","Path","tick","bind","assertThisInitialized","interval","onClick","publish","SocketGenerator","containers_SocketGeneratorInner","routeData","example-map","component","path","example-key","example-socket","socket-generator","routeList","App","renderLink","routeId","Link","to","renderRoute","Route","Router","history","Switch","Redirect","Boolean","location","hostname","match","ReactDOM","render","app","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a078a563.chunk.js","sourcesContent":["// @flow\n\nimport {createHashHistory} from 'history';\n\nexport default createHashHistory();\n","import React from 'react';\n\nclass KeyHandler extends React.Component {\n  /**\n   * Добавление слушателей нажатий клавиш.\n   * @param {string} eventName Название события.\n   * @return {undefined}\n   */\n  handlerAdd = (eventName) => {\n    document.addEventListener(eventName, this.handler);\n  };\n\n  /**\n   * Удаление слушателей нажатий клавиш.\n   * @param {string} eventName Название события.\n   * @return {undefined}\n   */\n  handlerRemove = (eventName) => {\n    document.removeEventListener(eventName, this.handler);\n  };\n\n  /**\n   * Обработчик нажатия клавиш.\n   * @param {*} e Событие.\n   * @return {function(*=)} Обработчик нажатия клавиш.\n   */\n  handler = (e) => {\n    if (this.props.keyList[e.type]) {\n      if (this.props.keyList[e.type][e.keyCode]) {\n        this.props.keyList[e.type][e.keyCode](e);\n      }\n    }\n  };\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    Object.keys(this.props.keyList).forEach(this.handlerAdd);\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    Object.keys(this.props.keyList).forEach(this.handlerRemove);\n  }\n\n  /**\n   * Должен ли компонент обновиться?\n   * На самом деле, обычно реакт сам отлично разбирается.\n   * Но иногда ручное управление позволяет существенно ускорить работу в \"узких местах\".\n   * @param {*} props Новые свойства.\n   // * @param {*} nextState Новое состояние.\n   * @return {boolean} Должен ли компонент обновиться?\n   */\n  shouldComponentUpdate(props) {\n    Object.keys(this.props.keyList).forEach(this.handlerRemove);\n    Object.keys(props.keyList).forEach(this.handlerAdd);\n    return false;\n  }\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n}\n\nexport default KeyHandler;\n","import React from 'react';\nimport './style.css';\n\nclass Key extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    isActive: false,\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    const {id, isActive} = this.props;\n    const classList = ['key'];\n\n    if (isActive) {\n      classList.push('key_active');\n    }\n\n    return (\n      <div className={classList.join(' ')}>\n        {id}\n      </div>\n    );\n  }\n}\n\nexport default Key;\n","import KeyHandler from 'modules/common/containers/KeyHandler/index.jsx';\nimport Key from \"modules/example-key/components/Key/index.jsx\";\nimport keys from 'modules/example-key/data/keys.json';\nimport React from 'react';\n\nconst keyList = Object.keys(keys);\n\nclass ExampleKey extends React.Component {\n  state = {\n    keys: {},\n  };\n\n  handleKey = (e) => {\n    this.setState((state) => ({\n      ...state,\n      keys: {\n        ...state.keys,\n        [e.keyCode]: true,\n      },\n    }));\n    setTimeout(this.clearKeyEvents);\n  };\n\n  keyList = {\n    keydown: {\n      [keys.Alt]: this.handleKey,\n      [keys.Backspace]: this.handleKey,\n      [keys.Control]: this.handleKey,\n      [keys.Delete]: this.handleKey,\n      [keys.Down]: this.handleKey,\n      [keys.End]: this.handleKey,\n      [keys.Enter]: this.handleKey,\n      [keys.Esc]: this.handleKey,\n      [keys.Home]: this.handleKey,\n      [keys.Insert]: this.handleKey,\n      [keys.Left]: this.handleKey,\n      [keys.PageDown]: this.handleKey,\n      [keys.PageUp]: this.handleKey,\n      [keys.Right]: this.handleKey,\n      [keys.Shift]: this.handleKey,\n      [keys.Up]: this.handleKey,\n    },\n  };\n\n  clearKeyEvents = () => {\n    this.setState({keys: {}})\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <div>\n        {keyList.map(this.renderKey)}\n        <KeyHandler keyList={this.keyList} />\n      </div>\n    );\n  }\n\n  renderKey = (key) => <Key id={key} isActive={this.state.keys[keys[key]]} key={key} />;\n}\n\nexport default ExampleKey;\n","import React from 'react';\nimport './style.css';\n\nclass Layout extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    main: () => <div>Main</div>,\n    side: () => <div>Side</div>,\n  };\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return (\n      <div className=\"layout\">\n        <div className=\"layout__side\">{this.props.side}</div>\n        <div className=\"layout__main\">{this.props.main}</div>\n      </div>\n    );\n\n  }\n}\n\nexport default Layout;\n","import React from 'react';\nimport './style.css';\n\nclass GeoJSONItem extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    onChange: () => {\n    },\n    value: {},\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    const {id, value} = this.props;\n    return (\n      <label className=\"geo-json\" htmlFor={id}>\n        <input id={id} name=\"tile\" onChange={this.handleChange} defaultChecked={value[id]} type=\"checkbox\" />\n        {id}\n      </label>\n    );\n  }\n\n  handleChange = () => {\n    this.props.onChange(this.props.id);\n  };\n}\n\nexport default GeoJSONItem;\n","import React from 'react';\nimport './style.css';\n\nclass TileLayerItem extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    onChange: () => {\n    },\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    const {id, value} = this.props;\n    return (\n      <label className=\"tile-radio\" htmlFor={id}>\n        <input id={id} name=\"tile\" onChange={this.handleChange} checked={value === id} type=\"radio\" />\n        {id}\n      </label>\n    );\n  }\n\n  handleChange = () => {\n    this.props.onChange(this.props.id);\n  };\n}\n\nexport default TileLayerItem;\n","import React from 'react';\n\nexport const MapContext = React.createContext(undefined);\n","import {MapContext} from 'modules/map/context/index.js';\nimport React from 'react';\n\n/**\n * Передать map в компонент.\n * @param {*} Component Компонент.\n * @return {*} Компонент.\n */\nexport default function withMap(Component) {\n  return class ComponentWithMap extends React.Component {\n    /**\n     * Вывести детей.\n     * @param {number} context Контекст.\n     * @return {*} Представление.\n     */\n    renderComponent = (context) => <Component {...this.props} {...context} />;\n\n    /**\n     * Отображение компонента\n     * @return {*} Представление компонента.\n     */\n    render() {\n      return <MapContext.Consumer>{this.renderComponent}</MapContext.Consumer>;\n    }\n  };\n}\n","import L from 'leaflet';\nimport withMap from 'modules/map/hoc/withMap/index.jsx';\nimport React from 'react';\n\nclass GeoJSON extends React.PureComponent {\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   * @param {*} props Предыдущие свойства.\n   // * @param {*} state Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate(props) {\n    this.layerDelete(props);\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.layerDelete(this.props);\n  }\n\n  /**\n   * Добавить слой.\n   * @return {undefined}\n   */\n  layerAdd(props) {\n    const {geoJSON, leaflet} = props;\n    this.layer = L.GeoJSON.geometryToLayer(geoJSON);\n    leaflet.addLayer(this.layer);\n  }\n\n  /**\n   * Удалить слой.\n   * @return {undefined}\n   */\n  layerDelete(props) {\n    props.leaflet.removeLayer(this.layer);\n  }\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n}\n\nexport default withMap(GeoJSON);\n","import L from 'leaflet';\nimport {MapContext} from 'modules/map/context/index.js';\nimport React from 'react';\nimport './style.css';\n\nclass Map extends React.PureComponent {\n  state = {\n    isLoad: false,\n    leaflet: undefined,\n  };\n\n  handleClick = (e) => {\n    const geoJSON = L.marker(e.latlng).toGeoJSON();\n    console.log(JSON.stringify(geoJSON));\n  };\n\n  handleLoad = () => {\n    this.setState({isLoad: true});\n  };\n\n  /**\n   * Получить ref.\n   * @param {*} map ref.\n   * @return {undefined}\n   */\n  refMap = (map) => {\n    this.map = map;\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <div className=\"map\" ref={this.refMap}>\n        <MapContext.Provider value={this.state}>\n          {this.state.leaflet && this.props.children}\n        </MapContext.Provider>\n      </div>\n    );\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    const leaflet = L.map(this.map);\n    this.setState({leaflet});\n    leaflet.on('click', this.handleClick);\n    window.addEventListener('load', this.handleLoad);\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.state.leaflet.off('click', this.handleClick);\n    this.state.leaflet.remove();\n    this.setState({leaflet: undefined});\n    window.removeEventListener('load', this.handleLoad);\n  }\n}\n\nexport default Map;\n","import L from 'leaflet';\nimport withMap from 'modules/map/hoc/withMap/index.jsx';\nimport React from 'react';\n\nclass TileLayer extends React.PureComponent {\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   * @param {*} props Предыдущие свойства.\n   // * @param {*} state Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate(props) {\n    this.layerDelete(props);\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.layerDelete(this.props);\n  }\n\n  /**\n   * Добавить слой.\n   * @return {undefined}\n   */\n  layerAdd(props) {\n    const {leaflet, params, url} = props;\n\n    this.layer = new L.TileLayer(url, params);\n    leaflet.addLayer(this.layer);\n  }\n\n  /**\n   * Удалить слой.\n   * @return {undefined}\n   */\n  layerDelete(props) {\n    props.leaflet.removeLayer(this.layer);\n  }\n}\n\nexport default withMap(TileLayer);\n","import L from 'leaflet';\nimport withMap from \"modules/map/hoc/withMap/index.jsx\";\nimport React from 'react';\n\nclass View extends React.Component {\n  bounds;\n\n  /**\n   * Получить \"очищеные\" координаты границ.\n   * @param {*} bounds Границы.\n   * @return {*} Границы.\n   */\n  static getBoundsClean(bounds) {\n    const nextBounds = View.getBoundsNext(bounds);\n\n    if (nextBounds.equals(bounds)) {\n      return bounds;\n    }\n\n    return View.getBoundsClean(nextBounds);\n  }\n\n  /**\n   * Сделать цикл: bounds->layer->geoJSON->bounds для \"очистки\" координат границ.\n   * @param {*} bounds Границы.\n   * @return {undefined}\n   */\n  static getBoundsNext(bounds) {\n    const rectangle = L.rectangle(bounds);\n    const view = rectangle.toGeoJSON();\n\n    return View.getBounds(view);\n  }\n\n  static getBounds(view) {\n    return L.geoJSON(view).getBounds();\n  }\n\n  /**\n   * Обработать смену положения карты\n   * @return {undefined}\n   */\n  handleViewChange = () => {\n    const {leaflet, onViewChange} = this.props;\n\n    if (onViewChange) {\n      const bounds = View.getBoundsClean(leaflet.getBounds());\n      const rectangle = L.rectangle(bounds);\n      const view = rectangle.toGeoJSON();\n      onViewChange(view);\n    }\n  };\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.fly();\n    this.props.leaflet.on('moveend zoomend', this.handleViewChange);\n  }\n\n  /**\n   * Перейти к виду\n   * @return {undefined}\n   */\n  fly() {\n    const {leaflet, view} = this.props;\n    const bounds = View.getBounds(view);\n    if (bounds.isValid()) {\n      leaflet.fitBounds(bounds);\n    } else {\n      leaflet.fitWorld({padding: [0, 0]});\n    }\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   * @param {*} props - Предыдущие свойства.\n   // * @param {*} state - Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate(props) {\n    const {isLoad, view} = this.props;\n\n    if (!props.isLoad && isLoad) {\n      this.props.leaflet.invalidateSize();\n      this.fly();\n    }\n\n    if (view !== props.view) {\n      const bounds = View.getBounds(view);\n      if (bounds.isValid() && !bounds.equals(this.bounds)) {\n        this.bounds = bounds;\n        this.fly();\n      }\n    }\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.props.leaflet.off('moveend zoomend', this.handleViewChange);\n  }\n}\n\nexport default withMap(View);\n","import Layout from 'modules/common/containers/Layout/index.jsx';\nimport GeoJSONItem from \"modules/example-map/components/GeoJSONItem/index.jsx\";\nimport TileLayerItem from 'modules/example-map/components/TileLayerItem/index.jsx';\nimport geoJSONData from 'modules/example-map/data/geo-json.json';\nimport tileLayerData from 'modules/example-map/data/tile-layer.json';\nimport GeoJSON from 'modules/map/containers/GeoJSON/index.jsx';\nimport Map from \"modules/map/containers/Map/index.jsx\";\nimport TileLayer from 'modules/map/containers/TileLayer/index.jsx';\nimport View from 'modules/map/containers/View/index.jsx';\nimport React from 'react';\n\nconst geoJSONIdList = Object.keys(geoJSONData);\nconst tileLayerIdList = Object.keys(tileLayerData);\n\nclass ExampleMap extends React.Component {\n  state = {\n    showData: {},\n    tileLayerId: tileLayerIdList[0],\n    view: {},\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <Layout main={this.renderMain()} side={this.renderSide()} />\n    );\n  }\n\n  renderMain() {\n    const geoJSONList = geoJSONIdList.filter(this.filterGeoJSON).map(this.getGeoJSON);\n    return (\n      <Map>\n        <TileLayer {...tileLayerData[this.state.tileLayerId]} />\n        <View onViewChange={this.handleViewChange} view={geoJSONList} />\n        {geoJSONList.map(this.renderGeoJSON)}\n      </Map>\n    );\n  }\n\n  renderSide() {\n    return (\n      <React.Fragment>\n        <fieldset>\n          <legend>Tile layer</legend>\n          {tileLayerIdList.map(this.renderTileLayer)}\n        </fieldset>\n        <fieldset>\n          <legend>View</legend>\n          <textarea cols=\"31\"\n                    disabled\n                    id=\"view\"\n                    name=\"view\"\n                    rows=\"31\"\n                    value={JSON.stringify(this.state.view, undefined, 2)} />\n        </fieldset>\n        <fieldset>\n          <legend>GeoJSON</legend>\n          {geoJSONIdList.map(this.renderGeoJSONItem)}\n        </fieldset>\n      </React.Fragment>\n    );\n  }\n\n  filterGeoJSON = (id) => this.state.showData[id];\n\n  getGeoJSON = (id) => geoJSONData[id];\n\n  handleGeoJSONChange = (id) => {\n    this.setState((state) => ({\n      ...state,\n      showData: {\n        ...state.showData,\n        [id]: !state.showData[id],\n      },\n    }));\n  };\n\n  handleTileLayerChange = (tileLayerId) => {\n    this.setState({tileLayerId});\n  };\n\n  handleViewChange = (view) => {\n    this.setState({view});\n  };\n\n  renderGeoJSON = (geoJSON, id) => <GeoJSON geoJSON={geoJSON} key={id} />;\n\n  renderGeoJSONItem = (id) => <GeoJSONItem key={id} onChange={this.handleGeoJSONChange} id={id} value={this.state.showData} />;\n\n  renderTileLayer = (id) => <TileLayerItem key={id} onChange={this.handleTileLayerChange} id={id} value={this.state.tileLayerId} />;\n}\n\nexport default ExampleMap;\n","import React from 'react';\n\nexport const SocketContext = React.createContext(undefined);\n","import CentrifugeJS from 'centrifuge';\nimport JsSHA from 'jssha';\nimport {SocketContext} from \"modules/centrifuge/context/index.js\";\nimport React from 'react';\n\nclass Centrifuge extends React.Component {\n  state = {\n    centrifuge: new CentrifugeJS(),\n  };\n\n  static get timestamp() {\n    return Math.round(Date.now() / 1000).toString();\n  }\n\n  get connectData() {\n    const {secret, url, user} = this.props;\n    const timestamp = Centrifuge.timestamp;\n    const token = Centrifuge.getToken(user, secret, timestamp);\n\n    return {\n      timestamp,\n      token,\n      url,\n      user,\n    };\n  }\n\n  static getToken(user, secret, timestamp) {\n    const hmacBody = `${user}${timestamp}`;\n    const shaObj = new JsSHA(\"SHA-256\", \"TEXT\");\n    shaObj.setHMACKey(secret, \"TEXT\");\n    shaObj.update(hmacBody);\n    return shaObj.getHMAC(\"HEX\");\n  }\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return (\n      <SocketContext.Provider value={this.state}>\n        {this.props.children}\n      </SocketContext.Provider>\n    );\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.connect();\n  }\n\n  connect() {\n    const {centrifuge} = this.state;\n    if (centrifuge.isDisconnected()) {\n      centrifuge.configure(this.connectData);\n      centrifuge.connect();\n    }\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.disconnect();\n  }\n\n  disconnect() {\n    const {centrifuge} = this.state;\n    centrifuge.removeAllListeners();\n    centrifuge.disconnect();\n  }\n}\n\nexport default Centrifuge;\n","import {SocketContext} from 'modules/centrifuge/context/index.js';\nimport React from 'react';\n\n/**\n * Передать map в компонент.\n * @param {*} Component Компонент.\n * @return {*} Компонент.\n */\nexport default function withSocket(Component) {\n  return class ComponentWithSocket extends React.Component {\n    /**\n     * Вывести детей.\n     * @param {number} context Контекст.\n     * @return {*} Представление.\n     */\n    renderComponent = (context) => <Component {...this.props} {...context} />;\n\n    /**\n     * Отображение компонента\n     * @return {*} Представление компонента.\n     */\n    render() {\n      return <SocketContext.Consumer>{this.renderComponent}</SocketContext.Consumer>;\n    }\n  };\n}\n","import {SocketContext} from \"modules/centrifuge/context/index.js\";\nimport withSocket from \"modules/centrifuge/hoc/withSocket/index.jsx\";\nimport React from 'react';\n\nclass Subscribe extends React.Component {\n  /**\n   * Обработать сообщение.\n   * @param {string} channel Канал.\n   * @param {*} data Данные.\n   * @return {undefined}\n   */\n  handleMessage = ({data}) => {\n    const {onMessage} = this.props;\n    if (onMessage) {\n      onMessage(data);\n    }\n  };\n\n  handleSubscribe = () => {\n    this.setState({subscription: this.subscription});\n  };\n\n  eventData = {\n    message: this.handleMessage,\n    subscribe: this.handleSubscribe,\n  };\n\n  state = {\n    subscription: undefined,\n  };\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return (\n      <SocketContext.Provider value={{\n        centrifuge: this.props.centrifuge,\n        subscription: this.subscription,\n      }}>\n        {this.props.children}\n      </SocketContext.Provider>\n    );\n  }\n\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.props.centrifuge.off('connect', this.handleConnect).on('connect', this.handleConnect);\n    this.subscribe();\n  }\n\n  /**\n   * Обработать подкулючение.\n   * @return {undefined}\n   */\n  handleConnect = () => {\n    this.forceUpdate();\n  };\n\n  /**\n   * Должен ли компонент обновиться?\n   * На самом деле, обычно реакт сам отлично разбирается.\n   * Но иногда ручное управление позволяет существенно ускорить работу в \"узких местах\".\n   * @param {*} props Новые свойства.\n   // * @param {*} state Новое состояние.\n   * @return {boolean} Должен ли компонент обновиться?\n   */\n  shouldComponentUpdate(props) {\n    return props.channel !== this.props.channel || !this.state.subscription;\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   // * @param {*} props Предыдущие свойства.\n   // * @param {*} state Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate() {\n    this.unsubscribe();\n    this.subscribe();\n  }\n\n  /**\n   * Подписаться.\n   * @return {void}\n   */\n  subscribe() {\n    const {centrifuge, channel} = this.props;\n\n    if (centrifuge.isConnected() && !this.subscription) {\n      this.subscription = centrifuge.subscribe(channel, this.eventData);\n    }\n  }\n\n  /**\n   * Отписаться.\n   * @return {void}\n   */\n  unsubscribe() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription.removeAllListeners();\n      this.subscription = null;\n    }\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n}\n\nexport default withSocket(Subscribe);\n","import L from 'leaflet';\nimport withMap from 'modules/map/hoc/withMap/index.jsx';\nimport React from 'react';\nimport './style.css';\n\n// Фикс иконок на картах\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  className: 'marker',\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nclass GeoJSON extends React.PureComponent {\n  /**\n   * Компонент примонтировался.\n   * В данный момент у нас есть возможность использовать refs,\n   * а следовательно это то самое место, где мы хотели бы указать установку фокуса.\n   * Так же, таймауты, ajax-запросы и взаимодействие с другими библиотеками стоит обрабатывать здесь.\n   * @return {undefined}\n   */\n  componentDidMount() {\n    this.layerAdd(this.props);\n  }\n\n  /**\n   * Вызывается сразу после render.\n   * Не вызывается в момент первого render'а компонента.\n   // * @param {*} props Предыдущие свойства.\n   // * @param {*} state Предыдущее состояние.\n   * @return {undefined}\n   */\n  componentDidUpdate() {\n    this.layer.setLatLng(L.GeoJSON.coordsToLatLng(this.props.point));\n  }\n\n  /**\n   * Вызывается сразу перед тем, как компонент будет удален из DOM.\n   * @return {undefined}\n   */\n  componentWillUnmount() {\n    this.layerDelete(this.props);\n  }\n\n  /**\n   * Добавить слой.\n   * @return {undefined}\n   */\n  layerAdd(props) {\n    const {point, leaflet} = props;\n    this.layer = L.marker(L.GeoJSON.coordsToLatLng(point));\n    leaflet.addLayer(this.layer);\n  }\n\n  /**\n   * Удалить слой.\n   * @return {undefined}\n   */\n  layerDelete(props) {\n    props.leaflet.removeLayer(this.layer);\n  }\n\n  /**\n   * Отображение компонента\n   * @return {*} Представление компонента.\n   */\n  render() {\n    return null;\n  }\n}\n\nexport default withMap(GeoJSON);\n","import Centrifuge from \"modules/centrifuge/containers/Centrifuge/index.jsx\";\nimport Subscribe from 'modules/centrifuge/containers/Subscribe/index.jsx';\nimport geoJSONData from 'modules/example-map/data/geo-json.json';\nimport tileLayerData from \"modules/example-map/data/tile-layer.json\";\nimport connectData from 'modules/example-socket/data/connect.json';\nimport Map from \"modules/map/containers/Map/index.jsx\";\nimport Marker from \"modules/map/containers/Marker/index.jsx\";\nimport TileLayer from \"modules/map/containers/TileLayer/index.jsx\";\nimport View from \"modules/map/containers/View/index.jsx\";\nimport React from 'react';\n\nconst geoJSONList = Object.keys(geoJSONData).map((id) => geoJSONData[id]);\n\nclass ExampleSocket extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    user: 'user',\n  };\n\n  state = {};\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <Centrifuge secret={connectData.secret} url={connectData.url} user={this.props.user}>\n        <Map>\n          <TileLayer {...tileLayerData.Stamen} />\n          <View view={geoJSONList} />\n          {this.renderPoint()}\n        </Map>\n        <Subscribe channel=\"userstory-to-devpro\" onMessage={this.handleMessage} />\n      </Centrifuge>\n    );\n  }\n\n  renderPoint() {\n    if (this.state.point) {\n      return <Marker point={this.state.point} />;\n    }\n  }\n\n  handleMessage = (point) => {\n    this.setState({point});\n  };\n}\n\nexport default ExampleSocket;\n","import withSocket from \"modules/centrifuge/hoc/withSocket/index.jsx\";\nimport geoJSONData from 'modules/example-map/data/geo-json.json';\nimport React from 'react';\n\nclass SocketGeneratorInner extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    interval: 300,\n  };\n\n  state = {\n    position: 0,\n  };\n\n  /**\n   * Конструктор компонента.\n   * @param {*} props Свойства переданые в компонент.\n   * @return {undefined}\n   */\n  constructor(props) {\n    super(props);\n    this.coordinates = geoJSONData.Path.coordinates;\n    this.length = this.coordinates.length;\n    this.position = 0;\n    this.tickBind = this.tick.bind(this);\n  }\n\n  tick() {\n    if (this.state.position < this.length) {\n      this.timeout = setTimeout(this.tickBind, this.props.interval);\n      this.process();\n      this.setState(this.setPosition);\n    }\n  }\n\n  setPosition = (state) => ({\n    ...state,\n    position: state.position + 1,\n  });\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <div>\n        <fieldset>\n          <legend>Control</legend>\n          <button onClick={this.handleStart}>Start</button>\n          {' '}\n          <button onClick={this.handlePause}>Pause</button>\n          {' '}\n          <button onClick={this.handleStop}>Stop</button>\n        </fieldset>\n        <fieldset>\n          <legend>Current</legend>\n          <textarea disabled value={JSON.stringify(this.coordinates[this.state.position])} />\n        </fieldset>\n      </div>\n    );\n  }\n\n  handleStart = () => {\n    this.tickBind();\n  };\n\n  handlePause = () => {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = undefined;\n    }\n  };\n\n  handleStop = () => {\n    this.handlePause();\n    this.setState({position: 0});\n    this.process();\n  };\n\n  process() {\n    const point = this.coordinates[this.state.position];\n    this.props.subscription.publish(point);\n  }\n}\n\nexport default withSocket(SocketGeneratorInner);\n","import Centrifuge from \"modules/centrifuge/containers/Centrifuge/index.jsx\";\nimport Subscribe from \"modules/centrifuge/containers/Subscribe/index.jsx\";\nimport SocketGeneratorInner from 'modules/example-socket/containers/SocketGeneratorInner/index.jsx';\nimport connectData from 'modules/example-socket/data/connect.json';\nimport React from 'react';\n\nclass SocketGenerator extends React.Component {\n  /**\n   * Значения свойств по-умолчанию.\n   * https://facebook.github.io/react/docs/typechecking-with-proptypes.html\n   */\n  static defaultProps = {\n    user: 'user',\n  };\n\n  /**\n   * Вывести компонент.\n   * @return {*} Представление.\n   */\n  render() {\n    return (\n      <Centrifuge secret={connectData.secret} url={connectData.url} user={this.props.user}>\n        <Subscribe channel=\"userstory-to-devpro\">\n          <SocketGeneratorInner />\n        </Subscribe>\n      </Centrifuge>\n    );\n  }\n}\n\nexport default SocketGenerator;\n","import history from 'app/history.js';\nimport ExampleKey from 'modules/example-key/containers/ExampleKey/index.jsx';\nimport ExampleMap from 'modules/example-map/containers/ExampleMap/index.jsx';\nimport ExampleSocket from \"modules/example-socket/containers/ExampleSocket/index.jsx\";\nimport SocketGenerator from \"modules/example-socket/containers/SocketGenerator/index.jsx\";\nimport React from 'react';\nimport {Redirect, Route, Switch} from \"react-router\";\nimport {Link, Router} from 'react-router-dom';\nimport './style.css';\n\nconst routeData = {\n  'example-map': {\n    component: ExampleMap,\n    name: 'ExampleMap',\n    path: '/example-map',\n  },\n  'example-key': {\n    component: ExampleKey,\n    name: 'ExampleKey',\n    path: '/example-key',\n  },\n  'example-socket': {\n    component: ExampleSocket,\n    name: 'ExampleSocket',\n    path: '/example-socket',\n  },\n  'socket-generator': {\n    component: SocketGenerator,\n    name: 'SocketGenerator',\n    path: '/socket-generator',\n  },\n};\n\nconst routeList = Object.keys(routeData);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router history={history}>\n        <div className=\"app\">\n          <div className=\"app__nav\">\n              {routeList.map(this.renderLink)}\n          </div>\n          <div className=\"app__content\">\n            <Switch>\n              {routeList.map(this.renderRoute)}\n              <Redirect to={routeData[routeList[0]].path} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n\n  renderLink = (routeId) => <Link className=\"app__nav-link\" key={routeId} to={routeData[routeId].path}>{routeData[routeId].name}</Link>;\n\n  renderRoute = (routeId) => <Route component={routeData[routeId].component} key={routeId} path={routeData[routeId].path} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import App from 'app/index.jsx';\nimport 'index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n  module.hot.accept('app/index.jsx', () => ReactDOM.render(<App />, document.getElementById('root')));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}